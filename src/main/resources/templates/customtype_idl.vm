#ifndef ${stringutil.upperCase($class.name)}_IDL
\#define ${stringutil.upperCase($class.name)}_IDL
\#include "BasicDataType.idl"
#if($class.hasStereotype("CORBASequence"))
#foreach($includedIDL in $includedIDLs)
\#include "$includedIDL"
#break
#end

#set($moduleBegin = $this.getIDLModuleDeclare($class))
#if($stringutil.isNotEmpty($moduleBegin))
$moduleBegin
#end
#if($stringutil.isNotEmpty($class.definition))$this.getIDLComment($this.indent, $class.definition)#end
#if($typedefs.isEmpty())
#set($elementType = $stringutil.substringBefore($stringutil.strip($this.getAttributes($class, "")), " "))
#if($stringutil.startsWith($elementType, "::"))
#set($elementType = $stringutil.substring($elementType, 2))
#end
#if($stringutil.isNotEmpty($elementType))
${this.indentString}typedef sequence<$elementType> $class.name;
#end
#else
#foreach($key in $typedefs.keySet())
#if($helper.isCustomType($key) && !$stringutil.contains($key, "::"))
#set($element = "::" + $key)
#else
#set($element = $key)
#end
${this.indentString}typedef sequence<$element> $class.name;
#break
#end
#end
#else
#foreach($includedIDL in $includedIDLs)
\#include "$includedIDL"
#end

#set($moduleBegin = $this.getIDLModuleDeclare($class))
#if($stringutil.isNotEmpty($moduleBegin))
$moduleBegin
#end
#if($hasRecursiveSequence)
${this.indentString}struct $class.name;
#end
#foreach($key in $typedefs.keySet())
#set($namespace = $class.getFullNamespace("_"))
#if($stringutil.isNotEmpty($namespace))
#set($namespace = $namespace + "_")
#end
#set($typedefName = $typedefs.get($key))
#set($typedefFullName = $namespace + $typedefName)
#set($includeGuard = $helper.upperCase($typedefFullName))
#ifndef $includeGuard
\#define $includeGuard
#if($helper.isCustomType($key) && !$stringutil.contains($key, "::"))
#set($element = "::" + $key)
#else
#set($element = $key)
#end
${this.indentString}typedef sequence<$element> $typedefName;
#endif
#end
#if($stringutil.isNotEmpty($class.definition))$this.getIDLComment($this.indent, $class.definition)#end
${this.indentString}struct ${class.name}{
#set($attributes = $this.getAttributes($class, ""))
#if($stringutil.isNotEmpty($attributes))
$attributes
#end
${this.indentString}};
#end
#set($moduleEnd = $this.getIDLModuleDeclareClose($class))
#if($stringutil.isNotEmpty($moduleEnd))
$moduleEnd
#end

#endif
